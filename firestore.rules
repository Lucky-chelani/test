rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && 
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }
    
    // Helper function to check if user is a member of a chatroom
    function isChatroomMember(chatroomId, userId) {
      let chatroom = get(/databases/$(database)/documents/chatrooms/$(chatroomId));
      return chatroom != null && 
             'members' in chatroom.data && 
             chatroom.data.members.hasAny([userId]);
    }
      // Chatrooms collection - admin only create/update/delete
    match /chatrooms/{chatroomId} {
      // Anyone can read chatrooms
      allow read: if request.auth != null;
      
      // Only admins can create new chatrooms
      allow create: if request.auth != null && (
        // Admin email check
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']) ||
        // Admin role check
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Only admins can update or delete chatrooms, except for joining (updating members)
      allow update: if request.auth != null && (
        // Admin access for all updates
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
        // Allow users to join by updating members array only
        (
          // Only allow updates to members and memberCount fields
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'memberCount']) &&
          // User is adding themselves to members array
          request.auth.uid in request.resource.data.members &&
          // User was not previously in members array
          !(request.auth.uid in resource.data.get('members', []))
        )
      );
      
      // Only admins can delete chatrooms
      allow delete: if request.auth != null && (
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Messages subcollection
      match /messages/{messageId} {
        // Anyone authenticated can read messages
        allow read: if request.auth != null;
          // Allow any authenticated user to send messages (no membership check)
        allow create: if request.auth != null
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.text is string
          && request.resource.data.text.size() <= 1000
          && request.resource.data.expiresAt is timestamp;
        
        // Allow users to delete their own messages
        allow update, delete: if request.auth != null
          && (
            resource.data.userId == request.auth.uid ||
            isAdmin(request.auth.uid)
          );
          
        // Allow automatic deletion of expired messages by any authenticated user
        // This is needed for the message cleanup service
        allow delete: if request.auth != null &&
          (resource.data.expiresAt < request.time ||
           (
             // Allow system cleanup on messages older than 8 hours
             resource.data.timestamp is timestamp && 
             resource.data.timestamp < request.time - duration.value(8, 'h')
           ));
      }
    }
    
    // Trek collection with role-based permissions
    match /treks/{trekId} {
      // Allow anyone to read treks
      allow read: if true;
      // Allow write access to admins or organizers
      allow create: if request.auth != null && (
        // Admin access check
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']) ||
        // Organizer check - get user document to check role
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'organizer' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      // Allow update/delete for admins or the organizer who created the trek
      allow update, delete: if request.auth != null && (
        // Admin access
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']) ||
        // Is the user an admin?
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
        // Is this the organizer who created the trek?
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'organizer' && 
         resource.data.organizerId == request.auth.uid)
      );
    }
    
    // Newsletter subscribers collection
    match /newsletter_subscribers/{subscriberId} {
      // Anyone can create a newsletter subscription
      allow create: if true;
      // Only authenticated admin users can read all subscriptions
      allow read: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']);
      // No one can update/delete subscribers except admins
      allow update, delete: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']);
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      // Allow authenticated users to create bookings
      allow create: if request.auth != null;
      // Users can read their own bookings
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // Allow updates for payment processing
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      // Only admin can read all bookings or delete bookings
      allow read, delete: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']);
    }
    
    // Payments collection
    match /payments/{paymentId} {
      // Allow authenticated users to create payment records
      allow create: if request.auth != null;
      // Users can read their own payment records
      allow read: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || resource.data.userId == request.auth.uid);
      // Only admin can read all payments or delete/update payments
      allow read, update, delete: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']);
    }
    
    // Categories collection - used for trek categories
    match /categories/{categoryId} {
      // Everyone can read categories
      allow read: if true;
      // Only admins and organizers can create categories
      allow create, update, delete: if request.auth != null && (
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'organizer'
      );
    }
    
    // Organizations collection with role-based permissions
    match /organizations/{orgId} {
      // Allow read access to all organization profiles
      allow read: if true;
      // Organization owners can create/update their own organization profile
      allow create, update: if request.auth != null && request.auth.uid == orgId;
      // Only admins can delete organization profiles
      allow delete: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com'] ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
      // Users collection with role-based permissions
    match /users/{userId} {
      // Users can create/read/update their own profiles
      allow create, read, update: if request.auth != null && request.auth.uid == userId;
      // Only admins can read all user profiles or delete profiles
      allow read, delete: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com'] ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // Prevent users from changing their own role - only admins can change roles
      allow update: if request.auth != null && request.auth.uid == userId && 
         !("role" in request.resource.data) || 
         request.resource.data.role == resource.data.role || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
      // Coupons collection with role-based permissions
    match /coupons/{couponId} {
      // Any authenticated user can read coupons for validation purposes
      allow read: if request.auth != null;
      
      // Only admins can create/update/delete coupons
      allow create, update, delete: if request.auth != null && (
        // Admin email check
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']) ||
        // Admin role check
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Allow coupon usage updates (increment usage count) for any authenticated user
      // This is specifically to allow usage count updates during checkout
      allow update: if request.auth != null &&
        // Only allow updates to the usageCount and updatedAt fields
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['usageCount', 'updatedAt']) &&
        // Ensure usageCount can only be incremented
        request.resource.data.usageCount > resource.data.usageCount;
    }
    
    // System status collection - for system health checks and availability tests
    match /system_status/{docId} {
      // Allow reading by any authenticated user
      allow read: if request.auth != null;
      
      // Allow admins to write system status documents
      allow create, update, delete: if request.auth != null && (
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    
    // Reviews collection rules
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      
      // Only authenticated users can create reviews
      allow create: if request.auth != null && 
        // Ensure user is setting their own userId
        request.resource.data.userId == request.auth.uid &&
        // Validate required fields
        request.resource.data.trekId is string &&
        request.resource.data.rating is number && 
        request.resource.data.rating >= 1 && 
        request.resource.data.rating <= 5;
      
      // Users can only edit/delete their own reviews
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
        
      // Allow marking reviews as helpful
      allow update: if request.auth != null &&
        // Only allow updates to the helpful and helpfulBy fields
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['helpful', 'helpfulBy']);
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
