rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {    match /chatrooms/{chatroomId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      
      match /messages/{messageId} {
        allow read: if request.auth != null;
        // Require expiration time for all new messages
        allow create: if request.auth != null
          && request.resource.data.userId == request.auth.uid          && request.resource.data.text is string
          && request.resource.data.text.size() <= 1000
          && request.resource.data.expiresAt is timestamp
          && request.resource.data.expiresAt <= request.time + 28800000; // 8 hours in milliseconds
        // Allow users to delete their own messages
        allow update, delete: if request.auth != null
          && resource.data.userId == request.auth.uid;
        // Allow automatic deletion of expired messages by any authenticated user
        allow delete: if request.auth != null
          && resource.data.expiresAt < request.time;
      }
    }
      // Trek collection with controlled permissions
    match /treks/{trekId} {
      // Allow anyone to read treks
      allow read: if true;
      // Only allow authenticated users to write
      allow write: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']);
    }    // Newsletter subscribers collection
    match /newsletter_subscribers/{subscriberId} {
      // Anyone can create a newsletter subscription
      allow create: if true;
      // Only authenticated admin users can read all subscriptions
      allow read: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']);
      // No one can update/delete subscribers except admins
      allow update, delete: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']);
    }    // Bookings collection
    match /bookings/{bookingId} {
      // Allow authenticated users to create bookings
      allow create: if request.auth != null;
      // Users can read their own bookings
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // Allow updates for payment processing
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      // Only admin can read all bookings or delete bookings
      allow read, delete: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']);
    }
    
    // Payments collection
    match /payments/{paymentId} {
      // Allow authenticated users to create payment records
      allow create: if request.auth != null;
      // Users can read their own payment records
      allow read: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || resource.data.userId == request.auth.uid);
      // Only admin can read all payments or delete/update payments
      allow read, update, delete: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']);
    }
    
    // Users collection - needed for profile creation
    match /users/{userId} {
      // Users can create/read/update their own profiles
      allow create, read, update: if request.auth != null && request.auth.uid == userId;
      // Only admins can read all user profiles or delete profiles
      allow read, delete: if request.auth != null && 
        (request.auth.token.email in ['luckychelani950@gmail.com', 'test@example.com', 'youremail@example.com']);
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
